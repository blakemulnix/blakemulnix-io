DONE ::
Blog post storage set up ::
Upload entire directory to S3 (with images and files)
Json files for metadata

TODO ::

Create homepage ::
welcome blurb
list blog posts
cool styling

Create script for generating blog file template ::
Create template .md and json with proper structure
take in tags and grab date 

Blog post rendering ::
Render using markdown-to-jsx with custom tailwind styled components
Add custom loader for images

Route: / ::
Home page that uses SSR to list out blog posts

Route: /post/123 ::
Show specific blog post
Folder structure: app/posts/postId/page.js	
Use generateStaticParams to prerender pages for all blogposts

SEO :: 
determine what needs done here
blog.blakemulnix.io doesn't even show up given a direct google search








Code for fetching all .md and .json files and getting presigned urls for images:

import { S3Client, ListObjectsCommand, GetObjectCommand, getSignedUrl } from "@aws-sdk/client-s3";
import { promises as fsPromises } from "fs";
import { join, dirname, extname } from "path";

const s3Client = new S3Client({ region: "your-region" });
const bucketName = "your-bucket-name";
const localBaseDirectory = "/path/to/local/directory";

async function listObjects(prefix: string = ""): Promise<string[]> {
  try {
    const listParams = {
      Bucket: bucketName,
      Prefix: prefix,
    };

    const response = await s3Client.send(new ListObjectsCommand(listParams));
    return response.Contents?.map((object) => object.Key || "") || [];
  } catch (error) {
    console.error(`Error listing objects for prefix ${prefix}:`, error);
    return [];
  }
}

async function downloadObjects(keys: string[]) {
  const markdownAndJsonKeys: string[] = [];
  const imageKeys: string[] = [];

  for (const key of keys) {
    const downloadParams = {
      Bucket: bucketName,
      Key: key,
    };

    try {
      const response = await s3Client.send(new GetObjectCommand(downloadParams));
      const fileContent = await response.Body?.getBuffer();

      if (fileContent) {
        const localFilePath = join(localBaseDirectory, key);

        // Determine file extension
        const ext = extname(key).toLowerCase();

        if (ext === ".md" || ext === ".json") {
          // For Markdown and JSON files, save locally
          await fsPromises.mkdir(dirname(localFilePath), { recursive: true });
          await fsPromises.writeFile(localFilePath, fileContent);
          markdownAndJsonKeys.push(key);
          console.log(`File ${key} downloaded successfully.`);
        } else if (ext === ".jpg" || ext === ".jpeg" || ext === ".png") {
          // For images, generate a pre-signed URL
          const signedUrl = await getSignedUrl(s3Client, new GetObjectCommand({
            Bucket: bucketName,
            Key: key,
          }, { expiresIn: 60 * 60 })); // URL expires in 1 hour
          imageKeys.push({ key, signedUrl });
          console.log(`Pre-signed URL generated for ${key}.`);
        }
      }
    } catch (error) {
      console.error(`Error downloading object ${key}:`, error);
    }
  }

  console.log("Markdown and JSON keys:", markdownAndJsonKeys);
  console.log("Image keys with pre-signed URLs:", imageKeys);
}

async function fetchAllFiles() {
  const objectKeys = await listObjects();
  await downloadObjects(objectKeys);
}

// Start the download process
fetchAllFiles();